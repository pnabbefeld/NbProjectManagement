/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbeans.modules.pm.docstree.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import org.netbeans.modules.pm.docstree.model.PMNodePropertiesImpl;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import org.netbeans.modules.pm.docstree.PMNodeType;
import org.netbeans.modules.pm.docstree.PMNodeProperties;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

/**
 *
 * @author Peter Nabbefeld
 */
public class CreateNodePanel extends JPanel {

    private final PMNodeType[] allowedNodeTypes;
    private JPanel displayedComponent;
    private InstallableDocumentListener currentListener;

    /**
     * Creates new form CreateNodePanel
     */
    public CreateNodePanel(PMNodeType[] allowedNodeTypes) {
        this.allowedNodeTypes = allowedNodeTypes;
        initComponents();
        displayedComponent = placeholder;
        setEditorComponent();
    }

    public PMNodePropertiesImpl createProperties(PMNodeProperties parent) {
        PMNodePropertiesImpl props = new PMNodePropertiesImpl(parent);
        PMNodeType nt = getSelectedNodeType();
        props.setNodeType(nt);
        switch (nt) {
            case DOC:
                props.setDisplayName(txtFilename.getText());
                props.setUrl(txtFilename.getText());
                break;
            case GROUP:
                props.setDisplayName(txtGroupName.getText());
                break;
            case PROJECT:
                props.setDisplayName(getDisplayNameFromProject(txtProjectLocation.getText()));
                props.setUrl(txtProjectLocation.getText());
                break;
            default:
                throw new AssertionError();
        }
        return props;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jfcProjects = new JFileChooser();
        pnlDocument = new JPanel();
        lblDocumentType = new JLabel();
        cbxDocumentType = new JComboBox<>();
        lblFilename = new JLabel();
        txtFilename = new JTextField();
        pnlDummy = new JPanel();
        pnlGroup = new JPanel();
        lblGroupName = new JLabel();
        txtGroupName = new JTextField();
        pnlProject = new JPanel();
        lblProjectLocation = new JLabel();
        txtProjectLocation = new JTextField();
        btnBrowseProject = new JButton();
        lblProjectName = new JLabel();
        txtProjectName = new JTextField();
        cbxNodeType = new JComboBox<>();
        lblNodeType = new JLabel();
        placeholder = new JPanel();

        jfcProjects.setDialogTitle(NbBundle.getMessage(CreateNodePanel.class, "CreateNodePanel.jfcProjects.dialogTitle")); // NOI18N
        jfcProjects.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        Mnemonics.setLocalizedText(lblDocumentType, NbBundle.getMessage(CreateNodePanel.class, "CreateNodePanel.lblDocumentType.text")); // NOI18N

        cbxDocumentType.setModel(createDocumentTypesModel());

        Mnemonics.setLocalizedText(lblFilename, NbBundle.getMessage(CreateNodePanel.class, "CreateNodePanel.lblFilename.text")); // NOI18N

        GroupLayout pnlDocumentLayout = new GroupLayout(pnlDocument);
        pnlDocument.setLayout(pnlDocumentLayout);
        pnlDocumentLayout.setHorizontalGroup(pnlDocumentLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnlDocumentLayout.createSequentialGroup()
                .addGroup(pnlDocumentLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(lblDocumentType)
                    .addComponent(lblFilename))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDocumentLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(txtFilename)
                    .addComponent(cbxDocumentType, 0, 343, Short.MAX_VALUE)))
        );
        pnlDocumentLayout.setVerticalGroup(pnlDocumentLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnlDocumentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDocumentLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxDocumentType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDocumentType))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDocumentLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFilename)
                    .addComponent(txtFilename, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        GroupLayout pnlDummyLayout = new GroupLayout(pnlDummy);
        pnlDummy.setLayout(pnlDummyLayout);
        pnlDummyLayout.setHorizontalGroup(pnlDummyLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        pnlDummyLayout.setVerticalGroup(pnlDummyLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        Mnemonics.setLocalizedText(lblGroupName, NbBundle.getMessage(CreateNodePanel.class, "CreateNodePanel.lblGroupName.text")); // NOI18N

        GroupLayout pnlGroupLayout = new GroupLayout(pnlGroup);
        pnlGroup.setLayout(pnlGroupLayout);
        pnlGroupLayout.setHorizontalGroup(pnlGroupLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnlGroupLayout.createSequentialGroup()
                .addComponent(lblGroupName, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtGroupName, GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
        );
        pnlGroupLayout.setVerticalGroup(pnlGroupLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnlGroupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGroupLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGroupName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGroupName))
                .addContainerGap(181, Short.MAX_VALUE))
        );

        Mnemonics.setLocalizedText(lblProjectLocation, NbBundle.getMessage(CreateNodePanel.class, "CreateNodePanel.lblProjectLocation.text")); // NOI18N

        Mnemonics.setLocalizedText(btnBrowseProject, NbBundle.getMessage(CreateNodePanel.class, "CreateNodePanel.btnBrowseProject.text")); // NOI18N
        btnBrowseProject.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnBrowseProjectActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(lblProjectName, NbBundle.getMessage(CreateNodePanel.class, "CreateNodePanel.lblProjectName.text")); // NOI18N

        txtProjectName.setEditable(false);

        GroupLayout pnlProjectLayout = new GroupLayout(pnlProject);
        pnlProject.setLayout(pnlProjectLayout);
        pnlProjectLayout.setHorizontalGroup(pnlProjectLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnlProjectLayout.createSequentialGroup()
                .addGroup(pnlProjectLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(lblProjectLocation)
                    .addComponent(lblProjectName))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlProjectLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(txtProjectLocation)
                    .addComponent(txtProjectName, GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnBrowseProject))
        );
        pnlProjectLayout.setVerticalGroup(pnlProjectLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnlProjectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlProjectLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProjectLocation, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProjectLocation)
                    .addComponent(btnBrowseProject))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlProjectLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProjectName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProjectName))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        cbxNodeType.setModel(createNodeTypesModel());
        cbxNodeType.setEnabled(allowedNodeTypes.length > 1);
        cbxNodeType.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbxNodeTypeActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(lblNodeType, NbBundle.getMessage(CreateNodePanel.class, "CreateNodePanel.lblNodeType.text")); // NOI18N

        GroupLayout placeholderLayout = new GroupLayout(placeholder);
        placeholder.setLayout(placeholderLayout);
        placeholderLayout.setHorizontalGroup(placeholderLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        placeholderLayout.setVerticalGroup(placeholderLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 108, Short.MAX_VALUE)
        );

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(placeholder, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNodeType)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxNodeType, 0, 288, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxNodeType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNodeType))
                .addGap(18, 18, 18)
                .addComponent(placeholder, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbxNodeTypeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cbxNodeTypeActionPerformed
        setEditorComponent();
    }//GEN-LAST:event_cbxNodeTypeActionPerformed

    private void btnBrowseProjectActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnBrowseProjectActionPerformed
//        Map<String, String> sorted = new TreeMap<>();
//        for (Map.Entry<Object, Object> entry : System.getProperties().entrySet()) {
//            sorted.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));
//        }
//        for (Map.Entry<String, String> entry : sorted.entrySet()) {
//            System.out.println(entry.getKey() + " = " + entry.getValue());
//        }
//        System.out.println();
        File home = new File(System.getProperty("user.dir"));
        File nbpr = new File(home, "NetBeansProjects");
        jfcProjects.setCurrentDirectory(nbpr.exists() ? nbpr : home);
        if (jfcProjects.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            txtProjectLocation.setText(jfcProjects.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseProjectActionPerformed

    private ComboBoxModel<PMNodeType> createNodeTypesModel() {
        DefaultComboBoxModel<PMNodeType> dcbm = new DefaultComboBoxModel<>(allowedNodeTypes);
        return dcbm;
    }

    private void setEditorComponent() {
        int index = cbxNodeType.getSelectedIndex();
        GroupLayout layout = (GroupLayout)getLayout();
        PMNodeType nodeType = cbxNodeType.getItemAt(index);
        JPanel newComponent;
        InstallableDocumentListener newDocListener = null;
        if (index >= 0) {
            switch (nodeType) {
                case DOC:
                    newComponent = pnlDocument;
                    break;
                case GROUP:
                    newComponent = pnlGroup;
                    break;
                case PROJECT:
                    newComponent = pnlProject;
                    newDocListener = new ProjectLocationListener(txtProjectLocation, txtProjectName);
                    break;
                default:
                    throw new AssertionError();
            }
        } else {
            newComponent = pnlDummy;
        }
        if (currentListener != null) {
            currentListener.uninstall();
            currentListener = null;
        }
        layout.replace(displayedComponent, newComponent);
        displayedComponent = newComponent;
        if (newDocListener != null) {
            newDocListener.install();
            currentListener = newDocListener;
        }
    }

    private ComboBoxModel<DocumentTypesEnum> createDocumentTypesModel() {
        DefaultComboBoxModel<DocumentTypesEnum> dcbm = new DefaultComboBoxModel<>(DocumentTypesEnum.values());
        return dcbm;
    }

    private PMNodeType getSelectedNodeType() {
        int index = cbxNodeType.getSelectedIndex();
        return index < 0 ? null : cbxNodeType.getItemAt(index);
    }

    private String getDisplayNameFromProject(String url) {
        int p = url.lastIndexOf('/');
        return p < 0 ? url : url.substring(p + 1);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnBrowseProject;
    private JComboBox<DocumentTypesEnum> cbxDocumentType;
    private JComboBox<PMNodeType> cbxNodeType;
    private JFileChooser jfcProjects;
    private JLabel lblDocumentType;
    private JLabel lblFilename;
    private JLabel lblGroupName;
    private JLabel lblNodeType;
    private JLabel lblProjectLocation;
    private JLabel lblProjectName;
    private JPanel placeholder;
    private JPanel pnlDocument;
    private JPanel pnlDummy;
    private JPanel pnlGroup;
    private JPanel pnlProject;
    private JTextField txtFilename;
    private JTextField txtGroupName;
    private JTextField txtProjectLocation;
    private JTextField txtProjectName;
    // End of variables declaration//GEN-END:variables
}
