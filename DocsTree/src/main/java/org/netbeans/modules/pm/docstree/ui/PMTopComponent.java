/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbeans.modules.pm.docstree.ui;

import org.netbeans.modules.pm.docstree.model.PMNodePropertiesImpl;
import java.awt.BorderLayout;
import java.util.Properties;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.modules.pm.docstree.PMNodeType;
import org.netbeans.modules.pm.docstree.PMRootNode;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.netbeans.modules.pm.docstree//PM//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PMTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED
)
@TopComponent.Registration(mode = "navigator", openAtStartup = true)
@ActionID(category = "Window", id = "org.netbeans.modules.pm.docstree.PMTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PMAction",
        preferredID = "PMTopComponent"
)
@Messages({
    "CTL_PMAction=Project Management",
    "CTL_PMTopComponent=PM",
    "HINT_PMTopComponent=This is a PM window"
})
public final class PMTopComponent extends TopComponent implements ExplorerManager.Provider {

    private final transient ExplorerManager explorerManager = new ExplorerManager();
    private Node root;

    public PMTopComponent() {
        initComponents();
        setName(Bundle.CTL_PMTopComponent());
        setToolTipText(Bundle.HINT_PMTopComponent());

        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmView = new BeanTreeView();
        toolbar = new JPanel();
        pnl = new JPanel();

        setLayout(new BorderLayout());
        add(pmView, BorderLayout.CENTER);

        toolbar.add(pnl);

        add(toolbar, BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JScrollPane pmView;
    private JPanel pnl;
    private JPanel toolbar;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
        if (root != null && root.getLookup() != null) {
            writeProperties(p, root, -1);
        }
    }

    void readProperties(Properties p) {
        System.out.println("Reading properties of: " + this.getClass().getName());
        String version = p.getProperty("version");
        assert "1.0".equals(version) : "Unknown properties version";
        PMNodePropertiesImpl rootProperties = buildNodeProperties(p, null);
        root = buildNodesFromProperties(rootProperties);
        explorerManager.setRootContext(root);
    }

    boolean writeProperties(Properties p, Node node, int index) {
        PMNodePropertiesImpl nodeProps = node.getLookup().lookup(PMNodePropertiesImpl.class);
//        if (nodeProps.getNodeType() != PMNodeType.GROUP) {
        if (index > 0) {
            nodeProps.getIndexValue().set(index);
        }
        String basePath = nodeProps.getPath() + ".";
        p.setProperty(basePath + "type", nodeProps.getNodeType().name());
        p.setProperty(basePath + "name", nodeProps.getDisplayName());
        if (nodeProps.getUrl() != null) {
            p.setProperty(basePath + "url", nodeProps.getUrl());
        }
        Node[] children = node.getChildren().getNodes();
        if (children.length > 0) {
            int count = 0;
            for (Node child : children) {
                if (writeProperties(p, child, count + 1)) {
                    count++;
                }
            }
            p.setProperty(basePath + "size", Integer.toString(count));
        }
        return true;
//        }
//        return false;
    }

    private PMNodePropertiesImpl buildNodeProperties(Properties p, PMNodePropertiesImpl parent) {
        String basePath;
        PMNodePropertiesImpl props = new PMNodePropertiesImpl(parent);
        if (parent != null) {
            parent.addChildProperties(props);
        }
        basePath = props.getPath() + ".";
        PMNodeType type;
        String name;
        String url;
        if (parent == null) {
            type = PMNodeType.ROOT;
            name = p.getProperty(basePath + "name", null);
            url = null;
        } else {
            type = PMNodeType.parse(p.getProperty(basePath + "type", null));
            name = p.getProperty(basePath + "name", props.getPath());
            url = p.getProperty(basePath + "url", null);
            if (type == null) {
                type = url == null ? PMNodeType.GROUP : PMNodeType.DOC;
            }
        }
        String sSize = p.getProperty(basePath + "size", "0");
        int iSize = Integer.parseInt(sSize);
//        if (type == PMNodeType.GROUP && url != null && iSize > 0) {
//            throw new IllegalStateException();
//        }
        props.setNodeType(type);
        props.setDisplayName(name);
        props.setUrl(url);
        for (int i = 1; i <= iSize; i++) {
            buildNodeProperties(p, props);
        }
        return props;
    }

    private Node buildNodesFromProperties(PMNodePropertiesImpl props) {
        return new PMRootNode(props);
    }
}
